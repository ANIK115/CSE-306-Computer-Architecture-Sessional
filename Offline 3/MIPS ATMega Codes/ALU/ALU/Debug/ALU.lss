
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d6  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052b  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000217  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f4  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0b00000000;	//input 1
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0b00000000;	//input 2
  6e:	17 ba       	out	0x17, r1	; 23
	DDRC = 0b00000000;	//op code
  70:	14 ba       	out	0x14, r1	; 20
	DDRD = 0b11111111;	//output
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	81 bb       	out	0x11, r24	; 17
	char a, b, aluOp, out;
	MCUCSR = (1<<JTD);
  76:	80 e8       	ldi	r24, 0x80	; 128
  78:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  7a:	84 bf       	out	0x34, r24	; 52
	
	
    while (1) 
    {
		a = PINA;
  7c:	29 b3       	in	r18, 0x19	; 25
		b = PINB;
  7e:	86 b3       	in	r24, 0x16	; 22
		aluOp = PINC;
  80:	93 b3       	in	r25, 0x13	; 19
		//a &= 00001111;
		//sb &= 00001111;
		//aluOp &= 00000111;
		
		//PORTD = b;
		if(aluOp == 0)
  82:	91 11       	cpse	r25, r1
  84:	03 c0       	rjmp	.+6      	; 0x8c <main+0x20>
		{
			PORTD = a+b;
  86:	82 0f       	add	r24, r18
  88:	82 bb       	out	0x12, r24	; 18
  8a:	f8 cf       	rjmp	.-16     	; 0x7c <main+0x10>
		}
		else if(aluOp == 1)
  8c:	91 30       	cpi	r25, 0x01	; 1
  8e:	39 f4       	brne	.+14     	; 0x9e <main+0x32>
		{
			char res = a-b;
  90:	92 2f       	mov	r25, r18
  92:	98 1b       	sub	r25, r24
			if(a-b == 0)
  94:	28 13       	cpse	r18, r24
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x2e>
			{
				res = res | 0b00010000;
  98:	90 61       	ori	r25, 0x10	; 16
			}
			PORTD = res;
  9a:	92 bb       	out	0x12, r25	; 18
  9c:	ef cf       	rjmp	.-34     	; 0x7c <main+0x10>
		}
		else if(aluOp == 2)
  9e:	92 30       	cpi	r25, 0x02	; 2
  a0:	19 f4       	brne	.+6      	; 0xa8 <main+0x3c>
		{
			PORTD = a & b;
  a2:	82 23       	and	r24, r18
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	ea cf       	rjmp	.-44     	; 0x7c <main+0x10>
		}
		else if(aluOp == 3)
  a8:	93 30       	cpi	r25, 0x03	; 3
  aa:	19 f4       	brne	.+6      	; 0xb2 <main+0x46>
		{
			PORTD = a | b;
  ac:	82 2b       	or	r24, r18
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	e5 cf       	rjmp	.-54     	; 0x7c <main+0x10>
		}
		else if(aluOp == 4)
  b2:	94 30       	cpi	r25, 0x04	; 4
  b4:	21 f4       	brne	.+8      	; 0xbe <main+0x52>
		{
			PORTD = ~(a | b);
  b6:	82 2b       	or	r24, r18
  b8:	80 95       	com	r24
  ba:	82 bb       	out	0x12, r24	; 18
  bc:	df cf       	rjmp	.-66     	; 0x7c <main+0x10>
		}
		else if(aluOp == 5)
  be:	95 30       	cpi	r25, 0x05	; 5
  c0:	49 f4       	brne	.+18     	; 0xd4 <main+0x68>
		{
			PORTD = a << b;
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x60>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	8a 95       	dec	r24
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <main+0x5c>
  d0:	42 bb       	out	0x12, r20	; 18
  d2:	d4 cf       	rjmp	.-88     	; 0x7c <main+0x10>
		}
		else if(aluOp == 6)
  d4:	96 30       	cpi	r25, 0x06	; 6
  d6:	91 f6       	brne	.-92     	; 0x7c <main+0x10>
		{
			if(a & (0b00001000))
  d8:	23 ff       	sbrs	r18, 3
  da:	10 c0       	rjmp	.+32     	; 0xfc <main+0x90>
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
			{
				for(int i=0; i< (int)b; i++)
  e0:	68 2f       	mov	r22, r24
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	46 17       	cp	r20, r22
  e6:	57 07       	cpc	r21, r23
  e8:	3c f4       	brge	.+14     	; 0xf8 <main+0x8c>
				{
					a = (a >> 1) | 8;
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	35 95       	asr	r19
  ee:	27 95       	ror	r18
  f0:	28 60       	ori	r18, 0x08	; 8
		}
		else if(aluOp == 6)
		{
			if(a & (0b00001000))
			{
				for(int i=0; i< (int)b; i++)
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	f4 cf       	rjmp	.-24     	; 0xe0 <main+0x74>
				{
					a = (a >> 1) | 8;
				}
				PORTD = a;
  f8:	22 bb       	out	0x12, r18	; 18
  fa:	c0 cf       	rjmp	.-128    	; 0x7c <main+0x10>
			}else
			{
				PORTD = a >> b;
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	a9 01       	movw	r20, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x9a>
 102:	55 95       	asr	r21
 104:	47 95       	ror	r20
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <main+0x96>
 10a:	42 bb       	out	0x12, r20	; 18
 10c:	b7 cf       	rjmp	.-146    	; 0x7c <main+0x10>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
