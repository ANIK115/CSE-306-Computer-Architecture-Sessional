
Control Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000572  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000307  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRB = 0b00000000; //PB0-PB3
  6c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0b11111111; //PC0-PC3
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	DDRA = 0b11111111; // full
  72:	8a bb       	out	0x1a, r24	; 26
	
	unsigned char opcode;
    /* Replace with your application code */
	
	
	MCUCSR = (1<<JTD);
  74:	80 e8       	ldi	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  78:	84 bf       	out	0x34, r24	; 52
	
	
	while(1)
	{
		opcode = PINB;
  7a:	86 b3       	in	r24, 0x16	; 22
		if(opcode == 0)
  7c:	81 11       	cpse	r24, r1
  7e:	05 c0       	rjmp	.+10     	; 0x8a <main+0x1e>
		{
			PORTA = 0x80;
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x01;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	85 bb       	out	0x15, r24	; 21
  88:	f8 cf       	rjmp	.-16     	; 0x7a <main+0xe>
		}
		else if(opcode == 1)
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	21 f4       	brne	.+8      	; 0x96 <main+0x2a>
		{
			PORTA = 0xD8;
  8e:	88 ed       	ldi	r24, 0xD8	; 216
  90:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
  92:	15 ba       	out	0x15, r1	; 21
  94:	f2 cf       	rjmp	.-28     	; 0x7a <main+0xe>
		}
		else if(opcode == 2)
  96:	82 30       	cpi	r24, 0x02	; 2
  98:	21 f4       	brne	.+8      	; 0xa2 <main+0x36>
		{
			PORTA = 0xCC;
  9a:	8c ec       	ldi	r24, 0xCC	; 204
  9c:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
  9e:	15 ba       	out	0x15, r1	; 21
  a0:	ec cf       	rjmp	.-40     	; 0x7a <main+0xe>
		}
		else if(opcode == 3)
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	21 f4       	brne	.+8      	; 0xae <main+0x42>
		{
			PORTA = 0xD4;
  a6:	84 ed       	ldi	r24, 0xD4	; 212
  a8:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
  aa:	15 ba       	out	0x15, r1	; 21
  ac:	e6 cf       	rjmp	.-52     	; 0x7a <main+0xe>
		}
		else if(opcode == 4)
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	29 f4       	brne	.+10     	; 0xbc <main+0x50>
		{
			PORTA = 0x90;
  b2:	80 e9       	ldi	r24, 0x90	; 144
  b4:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	df cf       	rjmp	.-66     	; 0x7a <main+0xe>
		}
		else if(opcode == 5)
  bc:	85 30       	cpi	r24, 0x05	; 5
  be:	21 f4       	brne	.+8      	; 0xc8 <main+0x5c>
		{
			PORTA = 0x00;
  c0:	1b ba       	out	0x1b, r1	; 27
			PORTC = 0x02;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	d9 cf       	rjmp	.-78     	; 0x7a <main+0xe>
		}
		else if(opcode == 6)
  c8:	86 30       	cpi	r24, 0x06	; 6
  ca:	21 f4       	brne	.+8      	; 0xd4 <main+0x68>
		{
			PORTA = 0xC3;
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
  d0:	15 ba       	out	0x15, r1	; 21
  d2:	d3 cf       	rjmp	.-90     	; 0x7a <main+0xe>
		}
		else if(opcode == 7)
  d4:	87 30       	cpi	r24, 0x07	; 7
  d6:	21 f4       	brne	.+8      	; 0xe0 <main+0x74>
		{
			PORTA = 0x04;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x04;
  dc:	85 bb       	out	0x15, r24	; 21
  de:	cd cf       	rjmp	.-102    	; 0x7a <main+0xe>
		}
		else if(opcode == 8)
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	29 f4       	brne	.+10     	; 0xee <main+0x82>
		{
			PORTA = 0x84;
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x01;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	c6 cf       	rjmp	.-116    	; 0x7a <main+0xe>
		}
		else if(opcode == 9)
  ee:	89 30       	cpi	r24, 0x09	; 9
  f0:	21 f4       	brne	.+8      	; 0xfa <main+0x8e>
		{
			PORTA = 0xC4;
  f2:	84 ec       	ldi	r24, 0xC4	; 196
  f4:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
  f6:	15 ba       	out	0x15, r1	; 21
  f8:	c0 cf       	rjmp	.-128    	; 0x7a <main+0xe>
		}
		else if(opcode == 10)
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	29 f4       	brne	.+10     	; 0x108 <main+0x9c>
		{
			PORTA = 0x88;
  fe:	88 e8       	ldi	r24, 0x88	; 136
 100:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x01;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	85 bb       	out	0x15, r24	; 21
 106:	b9 cf       	rjmp	.-142    	; 0x7a <main+0xe>
		}
		else if(opcode == 11)
 108:	8b 30       	cpi	r24, 0x0B	; 11
 10a:	21 f4       	brne	.+8      	; 0x114 <main+0xa8>
		{
			PORTA = 0xC8;
 10c:	88 ec       	ldi	r24, 0xC8	; 200
 10e:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
 110:	15 ba       	out	0x15, r1	; 21
 112:	b3 cf       	rjmp	.-154    	; 0x7a <main+0xe>
		}
		else if(opcode == 12)
 114:	8c 30       	cpi	r24, 0x0C	; 12
 116:	29 f4       	brne	.+10     	; 0x122 <main+0xb6>
		{
			PORTA = 0x8C;
 118:	8c e8       	ldi	r24, 0x8C	; 140
 11a:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x01;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	85 bb       	out	0x15, r24	; 21
 120:	ac cf       	rjmp	.-168    	; 0x7a <main+0xe>
		}
		else if(opcode == 13)
 122:	8d 30       	cpi	r24, 0x0D	; 13
 124:	21 f4       	brne	.+8      	; 0x12e <main+0xc2>
		{
			PORTA = 0x60;
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
 12a:	15 ba       	out	0x15, r1	; 21
 12c:	a6 cf       	rjmp	.-180    	; 0x7a <main+0xe>
		}
		else if(opcode == 14)
 12e:	8e 30       	cpi	r24, 0x0E	; 14
 130:	21 f4       	brne	.+8      	; 0x13a <main+0xce>
		{
			PORTA = 0xC0;
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x00;
 136:	15 ba       	out	0x15, r1	; 21
 138:	a0 cf       	rjmp	.-192    	; 0x7a <main+0xe>
		}
		else if(opcode == 15)
 13a:	8f 30       	cpi	r24, 0x0F	; 15
 13c:	09 f0       	breq	.+2      	; 0x140 <main+0xd4>
 13e:	9d cf       	rjmp	.-198    	; 0x7a <main+0xe>
		{
			PORTA = 0x04;
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	8b bb       	out	0x1b, r24	; 27
			PORTC = 0x08;
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	85 bb       	out	0x15, r24	; 21
 148:	98 cf       	rjmp	.-208    	; 0x7a <main+0xe>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
