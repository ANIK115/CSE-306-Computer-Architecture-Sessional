
Data Memory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000665  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005aa  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010b  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:




int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	60 97       	sbiw	r28, 0x10	; 16
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b00000000;//address
  80:	17 ba       	out	0x17, r1	; 23
	DDRD = 0b00000000; //write_data
  82:	11 ba       	out	0x11, r1	; 17
	
	DDRA = 0b11111111; //read_data
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b11111000; //PC0 for memory read,PC1 for memory write,PC2 for clk pulse
  88:	88 ef       	ldi	r24, 0xF8	; 248
  8a:	84 bb       	out	0x14, r24	; 20
	
	unsigned char memory[16],clk = 0, memory_read=0, memory_write=0, mem_address, write_data;

	MCUCSR = (1<<JTD);
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  90:	84 bf       	out	0x34, r24	; 52

	
    /* Replace with your application code */
    while (1) 
    {
		memory_read = PINC;
  92:	93 b3       	in	r25, 0x13	; 19
		memory_write = PINC;
  94:	83 b3       	in	r24, 0x13	; 19
		clk = PINC;
  96:	33 b3       	in	r19, 0x13	; 19
		
		mem_address = PINB;
  98:	26 b3       	in	r18, 0x16	; 22
		write_data = PIND;
  9a:	40 b3       	in	r20, 0x10	; 16
		
		
		
		
		if(memory_read & 0b00000001)
  9c:	90 ff       	sbrs	r25, 0
  9e:	08 c0       	rjmp	.+16     	; 0xb0 <main+0x44>
		{
			PORTA = memory[(int)mem_address];
  a0:	e1 e0       	ldi	r30, 0x01	; 1
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	ec 0f       	add	r30, r28
  a6:	fd 1f       	adc	r31, r29
  a8:	e2 0f       	add	r30, r18
  aa:	f1 1d       	adc	r31, r1
  ac:	90 81       	ld	r25, Z
  ae:	9b bb       	out	0x1b, r25	; 27
		}
		
		if((memory_write & 0b00000010) && (clk &  0b00000100))
  b0:	81 ff       	sbrs	r24, 1
  b2:	ef cf       	rjmp	.-34     	; 0x92 <main+0x26>
  b4:	32 ff       	sbrs	r19, 2
  b6:	ed cf       	rjmp	.-38     	; 0x92 <main+0x26>
		{
			memory[(int)mem_address] = write_data;
  b8:	e1 e0       	ldi	r30, 0x01	; 1
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ec 0f       	add	r30, r28
  be:	fd 1f       	adc	r31, r29
  c0:	e2 0f       	add	r30, r18
  c2:	f1 1d       	adc	r31, r1
  c4:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e9       	ldi	r18, 0x9F	; 159
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x60>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x6a>
  d6:	00 00       	nop
  d8:	dc cf       	rjmp	.-72     	; 0x92 <main+0x26>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
